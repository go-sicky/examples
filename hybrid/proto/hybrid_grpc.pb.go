//
// The MIT License (MIT)
//
// Copyright (c) 2021 HereweTech Co.LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

//*
// @file hybrid.proto
// @author Dr.NP <np@herewe.tech>
// @since 02/23/2025

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/hybrid.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hybrid_Hybrid_FullMethodName = "/hybrid.examples.sicky.dev.Hybrid/Hybrid"
)

// HybridClient is the client API for Hybrid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HybridClient interface {
	Hybrid(ctx context.Context, in *HybridRequest, opts ...grpc.CallOption) (*HybridResponse, error)
}

type hybridClient struct {
	cc grpc.ClientConnInterface
}

func NewHybridClient(cc grpc.ClientConnInterface) HybridClient {
	return &hybridClient{cc}
}

func (c *hybridClient) Hybrid(ctx context.Context, in *HybridRequest, opts ...grpc.CallOption) (*HybridResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HybridResponse)
	err := c.cc.Invoke(ctx, Hybrid_Hybrid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HybridServer is the server API for Hybrid service.
// All implementations must embed UnimplementedHybridServer
// for forward compatibility.
type HybridServer interface {
	Hybrid(context.Context, *HybridRequest) (*HybridResponse, error)
	mustEmbedUnimplementedHybridServer()
}

// UnimplementedHybridServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHybridServer struct{}

func (UnimplementedHybridServer) Hybrid(context.Context, *HybridRequest) (*HybridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hybrid not implemented")
}
func (UnimplementedHybridServer) mustEmbedUnimplementedHybridServer() {}
func (UnimplementedHybridServer) testEmbeddedByValue()                {}

// UnsafeHybridServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HybridServer will
// result in compilation errors.
type UnsafeHybridServer interface {
	mustEmbedUnimplementedHybridServer()
}

func RegisterHybridServer(s grpc.ServiceRegistrar, srv HybridServer) {
	// If the following call pancis, it indicates UnimplementedHybridServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hybrid_ServiceDesc, srv)
}

func _Hybrid_Hybrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HybridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridServer).Hybrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hybrid_Hybrid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridServer).Hybrid(ctx, req.(*HybridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hybrid_ServiceDesc is the grpc.ServiceDesc for Hybrid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hybrid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hybrid.examples.sicky.dev.Hybrid",
	HandlerType: (*HybridServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hybrid",
			Handler:    _Hybrid_Hybrid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hybrid.proto",
}
